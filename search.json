[{"path":[]},{"path":"https://jakubnowosad.com/pollen/articles/intro.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Introduction to the pollen package","text":"examples , use pollen_count dataset available pollen package. five variables: site - name aerobiological monitoring site (one “Atlantis”, “Hundred Acre Wood”, “Oz”, “Shire”) date - date measurement alder - pollen concentration alder (grains/m3) birch - pollen concentration birch (grains/m3) hazel - pollen concentration hazel (grains/m3)","code":"data(\"pollen_count\") head(pollen_count) #>   site       date alder birch hazel #> 1   Oz 2007-01-01     0     0     0 #> 2   Oz 2007-01-02     0     0     0 #> 3   Oz 2007-01-03     0     0     0 #> 4   Oz 2007-01-04     0     0     0 #> 5   Oz 2007-01-05     0     0     0 #> 6   Oz 2007-01-06     0     0     0"},{"path":"https://jakubnowosad.com/pollen/articles/intro.html","id":"pollen-season","dir":"Articles","previous_headings":"Examples","what":"Pollen season","title":"Introduction to the pollen package","text":"important function package, pollen_season() determines pollen season limits. can calculated independently site, example Oz: … Atlantis: NA returned years missing values data, can see . combination purrr package (base apply() function), possible calculate pollen season limits many sites:","code":"df <- subset(pollen_count, site == \"Oz\") pollen_season(value = df$birch, date = df$date, method = \"95\") #>    year      start        end #> 1  2007 2007-03-31 2007-05-03 #> 2  2008 2008-04-19 2008-05-07 #> 3  2009 2009-04-09 2009-05-09 #> 4  2010 2010-04-14 2010-05-07 #> 5  2011 2011-04-20 2011-05-17 #> 6  2012 2012-04-09 2012-05-14 #> 7  2013 2013-04-09 2013-05-09 #> 8  2014 2014-04-08 2014-05-10 #> 9  2015 2015-04-08 2015-04-30 #> 10 2016 2016-04-06 2016-05-09 df2 <- subset(pollen_count, site == \"Atlantis\") pollen_season(value = df2$alder, date = df2$date, method = \"95\") #> Warning in pollen_season(value = df2$alder, date = df2$date, method = \"95\"): NA #> values were found in the input data. #>    year      start        end #> 1  2007       <NA>       <NA> #> 2  2008 2008-03-23 2008-04-14 #> 3  2009 2009-03-16 2009-04-03 #> 4  2010 2010-03-26 2010-04-07 #> 5  2011 2011-03-28 2011-04-14 #> 6  2012 2012-02-13 2012-04-05 #> 7  2013 2013-02-05 2013-03-16 #> 8  2014 2014-02-11 2014-04-29 #> 9  2015 2015-03-19 2015-04-04 #> 10 2016 2016-03-14 2016-04-23 library(purrr) pollen_count %>%   split(., .$site) %>%   map_dfr(~pollen_season(value = .$hazel, date = .$date, method = \"95\"), .id = \"site\") #>                 site year      start        end #> 1           Atlantis 2007 2007-01-29 2007-03-19 #> 2           Atlantis 2008 2008-03-23 2008-04-14 #> 3           Atlantis 2009 2009-03-15 2009-04-11 #> 4           Atlantis 2010 2010-03-24 2010-04-14 #> 5           Atlantis 2011 2011-03-26 2011-04-12 #> 6           Atlantis 2012 2012-01-21 2012-03-26 #> 7           Atlantis 2013 2013-02-02 2013-03-29 #> 8           Atlantis 2014 2014-02-07 2014-04-09 #> 9           Atlantis 2015 2015-03-01 2015-03-30 #> 10          Atlantis 2016 2016-03-11 2016-04-06 #> 11 Hundred Acre Wood 2007 2007-01-29 2007-03-31 #> 12 Hundred Acre Wood 2008 2008-03-10 2008-05-10 #> 13 Hundred Acre Wood 2009 2009-02-08 2009-03-31 #> 14 Hundred Acre Wood 2010 2010-01-24 2010-04-16 #> 15 Hundred Acre Wood 2011 2011-03-25 2011-04-16 #> 16 Hundred Acre Wood 2012 2012-01-10 2012-03-29 #> 17 Hundred Acre Wood 2013 2013-01-24 2013-03-12 #> 18 Hundred Acre Wood 2014 2014-03-04 2014-03-31 #> 19 Hundred Acre Wood 2015 2015-02-26 2015-03-31 #> 20 Hundred Acre Wood 2016 2016-02-06 2016-03-31 #> 21                Oz 2007 2007-02-03 2007-03-18 #> 22                Oz 2008 2008-03-10 2008-04-03 #> 23                Oz 2009 2009-02-17 2009-03-26 #> 24                Oz 2010 2010-03-18 2010-04-10 #> 25                Oz 2011 2011-03-27 2011-04-13 #> 26                Oz 2012 2012-01-12 2012-03-14 #> 27                Oz 2013 2013-01-22 2013-03-25 #> 28                Oz 2014 2014-03-05 2014-04-05 #> 29                Oz 2015 2015-03-19 2015-04-02 #> 30                Oz 2016 2016-03-10 2016-03-30 #> 31             Shire 2007 2007-01-28 2007-03-24 #> 32             Shire 2008 2008-02-22 2008-04-01 #> 33             Shire 2009 2009-02-03 2009-03-27 #> 34             Shire 2010 2010-02-07 2010-04-07 #> 35             Shire 2011 2011-02-20 2011-04-12 #> 36             Shire 2012 2012-01-10 2012-03-18 #> 37             Shire 2013 2013-01-21 2013-03-02 #> 38             Shire 2014 2014-03-01 2014-03-27 #> 39             Shire 2015 2015-02-19 2015-03-30 #> 40             Shire 2016 2016-01-17 2016-03-28"},{"path":"https://jakubnowosad.com/pollen/articles/intro.html","id":"comparision-of-the-pollen-season-methods","dir":"Articles","previous_headings":"Examples","what":"Comparision of the pollen season methods","title":"Introduction to the pollen package","text":"Next possibility compare many methods determination pollen season limits one measurement site. Let’s try Oz: just need provide vector names methods use map_dfr() function:","code":"df <- subset(pollen_count, site == \"Oz\") ps_methods <- c(\"90\", \"95\", \"98\", \"Mesa\", \"Jager\", \"Lejoly\") names(ps_methods) <- ps_methods df_seasons <- ps_methods %>%   map_dfr(~pollen_season(method = ., value = df$birch, date = df$date), .id = \"method\") head(df_seasons) #>   method year      start        end #> 1     90 2007 2007-03-31 2007-04-29 #> 2     90 2008 2008-04-20 2008-05-03 #> 3     90 2009 2009-04-10 2009-05-04 #> 4     90 2010 2010-04-14 2010-05-03 #> 5     90 2011 2011-04-21 2011-05-13 #> 6     90 2012 2012-04-11 2012-05-07"},{"path":"https://jakubnowosad.com/pollen/articles/intro.html","id":"replacement-of-outliers","dir":"Articles","previous_headings":"Examples","what":"Replacement of outliers","title":"Introduction to the pollen package","text":"pollen package also implements method replacement outliers (Kasprzyk Walanus (2014) <doi:10.1007/s10453-014-9332-8>) outliers_replacer() function. outliers_replacer() accepts column concentration, column date, threshold - number indicating many times outlying value needs larger background replaced. method can applied single site: group sites:","code":"df <- subset(pollen_count, site == \"Shire\") new_df <- outliers_replacer(value = df$alder, date = df$date) identical(df, new_df) #> [1] FALSE library(purrr) new_pollen_count <- pollen_count %>%   split(., .$site) %>%   map_dfr(~outliers_replacer(value = .$hazel, date = .$date, threshold = 4))"},{"path":[]},{"path":"https://jakubnowosad.com/pollen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakub Nowosad. Author, maintainer.","code":""},{"path":"https://jakubnowosad.com/pollen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nowosad, Jakub (2019). pollen: Analysis Aerobiological Data. R package version 0.71.0.         https://github.com/Nowosad/pollen","code":"@Manual{,   title = {pollen: Analysis of Aerobiological Data},   author = {Jakub Nowosad},   year = {2019},   note = {R package version 0.71},   url = {https://CRAN.R-project.org/package=pollen}, }"},{"path":"https://jakubnowosad.com/pollen/index.html","id":"pollen---tools-for-working-with-aerobiological-data","dir":"","previous_headings":"","what":"Analysis of Aerobiological Data","title":"Analysis of Aerobiological Data","text":"pollen package set functions working aerobiological data. takes care widely use aerobiological calculations, including determination pollen season limits, replacement outliers (Kasprzyk Walanus (2014)), calculation growing degree days (Baskerville Emin (1969)).","code":""},{"path":"https://jakubnowosad.com/pollen/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Aerobiological Data","text":"Get released version CRAN: development version github:","code":"install.packages(\"pollen\") remotes::install_github(\"nowosad/pollen\")"},{"path":"https://jakubnowosad.com/pollen/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Analysis of Aerobiological Data","text":"","code":"library(pollen) data(\"pollen_count\") head(pollen_count) #>   site       date alder birch hazel #> 1   Oz 2007-01-01     0     0     0 #> 2   Oz 2007-01-02     0     0     0 #> 3   Oz 2007-01-03     0     0     0 #> 4   Oz 2007-01-04     0     0     0 #> 5   Oz 2007-01-05     0     0     0 #> 6   Oz 2007-01-06     0     0     0"},{"path":"https://jakubnowosad.com/pollen/index.html","id":"pollen-season-calculation","dir":"","previous_headings":"Examples","what":"Pollen season calculation","title":"Analysis of Aerobiological Data","text":"examples pollen seasons’ calculations can found first package vignette.","code":"df <- subset(pollen_count, site == \"Oz\") pollen_season(value = df$birch, date = df$date, method = \"95\") #>    year      start        end #> 1  2007 2007-03-31 2007-05-03 #> 2  2008 2008-04-19 2008-05-07 #> 3  2009 2009-04-09 2009-05-09 #> 4  2010 2010-04-14 2010-05-07 #> 5  2011 2011-04-20 2011-05-17 #> 6  2012 2012-04-09 2012-05-14 #> 7  2013 2013-04-09 2013-05-09 #> 8  2014 2014-04-08 2014-05-10 #> 9  2015 2015-04-08 2015-04-30 #> 10 2016 2016-04-06 2016-05-09"},{"path":"https://jakubnowosad.com/pollen/index.html","id":"growing-degree-days-gdd-calculation","dir":"","previous_headings":"Examples","what":"Growing degree days (GDD) calculation","title":"Analysis of Aerobiological Data","text":"Examples Growing degree days (GDD) calculations can found second package vignette.","code":""},{"path":"https://jakubnowosad.com/pollen/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Analysis of Aerobiological Data","text":"cite pollen package publications, please use: Nowosad, Jakub (2019). pollen: Analysis Aerobiological Data. R package version 0.71.0. https://github.com/Nowosad/pollen LaTeX/BibTeX version can obtained :","code":"library(pollen) citation(\"pollen\")"},{"path":"https://jakubnowosad.com/pollen/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Analysis of Aerobiological Data","text":"Feel free submit issues enhancement requests.","code":""},{"path":"https://jakubnowosad.com/pollen/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Analysis of Aerobiological Data","text":"Baskerville, G., & Emin, P.: 1969. Rapid Estimation Heat Accumulation Maximum Minimum Temperatures. Ecology, 50(3), 514-517. https://doi.org/10.2307/1933912 Kasprzyk, . . Walanus.: 2014. Gamma, Gaussian Logistic Distribution Models Airborne Pollen Grains Fungal Spore Season Dynamics, Aerobiologia 30(4), 369-83.","code":""},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Determining base temperatures — base_temp","title":"Determining base temperatures — base_temp","text":"function determines base temperature (\"tbase\") based mean temperature entire season number days ith planting reach given developmental stage study. allows use one four methods calculate tbase, including: (1) least standard deviation GDD (Magoon Culpepper, 1932; Stier, 1939) - `\"sd_gdd\"`; (2) least standard deviation days (Arnold, 1959) - `\"sd_day\"`; (3) coefficient variation days (Nuttonson, 1958) - `\"cv_day\"`; (4) regression coefficient (Hoover, 1955) - `\"y_i\"`.","code":""},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determining base temperatures — base_temp","text":"","code":"base_temp(tavg, d, type)"},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determining base temperatures — base_temp","text":"tavg mean temperature entire season plantings (numerical vector, one value planting) d number days ith planting reach given developmental stage study (e.g., flowering ) (numerical vector, one value planting) type either `\"sd_gdd\"`, `\"sd_day\"`, `\"cv_day\"`, `\"y_i\"`. explanation type, see Yang et al. 1995","code":""},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determining base temperatures — base_temp","text":"numeric value representing base temperature used, example, GDD calculations","code":""},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determining base temperatures — base_temp","text":"Yang, S., Logan, J., & Coffey, D. L. (1995). Mathematical formulae calculating base temperature growing degree days. Agricultural Forest Meteorology (Vol. 74, Issues 1-2, pp. 61-74). Elsevier BV Magoon, C. ., & Culpepper, C. W. (1932). Response sweet corn varying temperatures time planting canning maturity (. 1488-2016-124513). Stier, H. S. (1939). physiological study growth fruiting tomato (Lycopersicon esculentum L.) reference effect climatic edaphic conditions (Doctoral dissertation, Ph. D. Dissertation, University Maryland, College Park, MD, USA). Arnold, C. Y. (1959, January). determination significance base temperature linear heat unit system. Proceedings american Society horticultural Science (Vol. 74, . 1, pp. 430-445). Nuttonson, M. Y. (1955). Wheat-climate relationships use phenology ascertaining thermal photo-thermal requirements wheat. Amer. Inst. Crop Ecology, Washington, D. Hoover, M. W. (1955). effects temperature growth southern peas. Proc. . Soc. Hortic. Sci (Vol. 66, pp. 308-312).","code":""},{"path":[]},{"path":"https://jakubnowosad.com/pollen/reference/base_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determining base temperatures — base_temp","text":"","code":"library(pollen) tavg <- c(25, 20, 15, 10) d <- c(6, 11, 16, 21) base_temp(tavg = tavg, d = d, type = \"sd_gdd\") #> [1] 4 base_temp(tavg = tavg, d = d, type = \"sd_day\") #> [1] 10.00926 base_temp(tavg = tavg, d = d, type = \"cv_day\") #> [1] 2.211921 base_temp(tavg = tavg, d = d, type = \"y_i\") #> [1] 4"},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Growing Degree Days Function — gdd","title":"Growing Degree Days Function — gdd","text":"function calculates growing degree days (GDD) using average daily maximum minimum temperatures, base temperature maximum base temperature","code":""},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growing Degree Days Function — gdd","text":"","code":"gdd(tmax, tmin, tbase, tbase_max, type = \"C\")"},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growing Degree Days Function — gdd","text":"tmax daily maximum temperature tmin daily minimum temperature tbase base temperature tbase_max maximum base temperature type either \"B\", \"C\", \"D\". default \"C\". Type \"B\" - heat units calculated based difference mean daily temperature threshold (`tbase`). case value `tmin` lower `tbase`, replaced `tbase`. Type `\"C\"` - type `\"B\"` value `tmax` larger `tbase_max`, replaced `tbase_max`. Type `\"D\"`- type `\"B\"` value `tmax` larger `tbase_max`, heat units added.","code":""},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growing Degree Days Function — gdd","text":"numeric vector GDD values","code":""},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growing Degree Days Function — gdd","text":"Baskerville, G., & Emin, P. (1969). Rapid Estimation Heat Accumulation Maximum Minimum Temperatures. Ecology, 50(3), 514-517. doi:10.2307/1933912","code":""},{"path":[]},{"path":"https://jakubnowosad.com/pollen/reference/gdd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growing Degree Days Function — gdd","text":"","code":"set.seed(25) df <- data.frame(tmax = runif(100, 6, 10), tmin = runif(100, 4, 6))  gdd(tmax = df$tmax, tmin = df$tmin, tbase = 5, tbase_max = 30) #>   [1]   1.392985   3.282512   4.259733   6.554503   7.303287   9.810031 #>   [7]  11.562224  12.765263  13.878573  15.000558  16.156492  17.383517 #>  [13]  19.800607  21.478356  23.369211  24.164222  26.150454  28.305062 #>  [19]  29.758898  31.717690  32.299061  33.700871  34.404637  35.213010 #>  [25]  36.296748  37.764013  38.409299  40.410950  42.352622  43.437435 #>  [31]  45.583809  46.898344  47.871860  48.918490  51.504291  52.812050 #>  [37]  55.232033  56.759521  57.572129  58.319572  60.705153  62.204334 #>  [43]  63.838365  65.826710  67.450093  68.534809  71.016913  73.127310 #>  [49]  74.131668  76.074927  76.844723  78.817516  80.960568  82.446401 #>  [55]  84.000869  84.975839  85.778519  87.371530  88.238972  89.469210 #>  [61]  90.638672  91.785048  92.894984  94.750790  96.491373  98.958947 #>  [67] 100.404830 102.695104 104.531536 105.704549 108.122525 108.897840 #>  [73] 109.647810 112.055520 113.011545 114.644393 115.422643 118.031517 #>  [79] 118.893385 119.761111 121.831796 123.021970 125.019018 125.635943 #>  [85] 127.751313 129.805915 130.925935 132.390394 134.460273 136.077224 #>  [91] 137.989401 138.928684 140.986772 142.896909 143.415940 144.949065 #>  [97] 146.758733 149.065694 150.026993 151.204477"},{"path":"https://jakubnowosad.com/pollen/reference/gdd_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Exemplary dataset for GDD calculations — gdd_data","title":"Exemplary dataset for GDD calculations — gdd_data","text":"gdd_data dataset containing synthetic data day, tmax (daily maximum temperature), tmin (daily minimum temperature)","code":""},{"path":"https://jakubnowosad.com/pollen/reference/gdd_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exemplary dataset for GDD calculations — gdd_data","text":"data frame 100 rows 3 variables: day tmax tmin","code":""},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":null,"dir":"Reference","previous_headings":"","what":"A Outliers Replacer Function — outliers_replacer","title":"A Outliers Replacer Function — outliers_replacer","text":"function finds outliers pollen time-series replaces background values","code":""},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Outliers Replacer Function — outliers_replacer","text":"","code":"outliers_replacer(value, date, threshold = 5, sum_percent = 100)"},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Outliers Replacer Function — outliers_replacer","text":"value pollen concentration values date dates threshold number indicating many times outlying value needs larger background replaced (default 5) sum_percent sum_percent parameter","code":""},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Outliers Replacer Function — outliers_replacer","text":"new data.frame object replaced outliers","code":""},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Outliers Replacer Function — outliers_replacer","text":"Kasprzyk, . . Walanus.: 2014. Gamma, Gaussian Logistic Distribution Models Airborne Pollen Grains Fungal Spore Season Dynamics, Aerobiologia 30(4), 369-83.","code":""},{"path":"https://jakubnowosad.com/pollen/reference/outliers_replacer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Outliers Replacer Function — outliers_replacer","text":"","code":"data(pollen_count) df <- subset(pollen_count, site=='Shire') new_df <- outliers_replacer(df$birch, df$date) identical(df, new_df) #> [1] FALSE  library('purrr') new_pollen_count <- pollen_count %>% split(., .$site) %>%        map_df(~outliers_replacer(value=.$hazel, date=.$date, threshold=4))"},{"path":"https://jakubnowosad.com/pollen/reference/pollen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pollen: Analysis of Aerobiological Data — pollen-package","title":"pollen: Analysis of Aerobiological Data — pollen-package","text":"Supports analysis aerobiological data. Available features include determination pollen season limits, replacement outliers (Kasprzyk Walanus (2014) doi:10.1007/s10453-014-9332-8 ), calculation growing degree days (Baskerville Emin (1969) doi:10.2307/1933912 ), determination base temperature growing degree days (Yang et al. (1995) <doi:10.1016/0168-1923(94)02185-M).","code":""},{"path":[]},{"path":"https://jakubnowosad.com/pollen/reference/pollen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pollen: Analysis of Aerobiological Data — pollen-package","text":"Maintainer: Jakub Nowosad nowosad.jakub@gmail.com (ORCID)","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollen count of alder, birch, and hazel — pollen_count","title":"Pollen count of alder, birch, and hazel — pollen_count","text":"pollen_count dataset containing synthetic data alder, birch, hazel pollen count four locations ('Oz', 'Shire', 'Atlantis', 'Hundred Acre Wood') 2007 2016","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_count.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pollen count of alder, birch, and hazel — pollen_count","text":"data frame 8352 rows 5 variables: site date alder birch hazel","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_index.html","id":null,"dir":"Reference","previous_headings":"","what":"A Pollen Index Function — pollen_index","title":"A Pollen Index Function — pollen_index","text":"function calculates Pollen Index (PI), implemented average amount annual pollen collected based input data","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Pollen Index Function — pollen_index","text":"","code":"pollen_index(value, date)"},{"path":"https://jakubnowosad.com/pollen/reference/pollen_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Pollen Index Function — pollen_index","text":"value pollen concentration values date dates","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Pollen Index Function — pollen_index","text":"","code":"data(pollen_count) df <- subset(pollen_count, site == 'Oz') pollen_index(value = df$birch, date = df$date) #> [1] 5185.955"},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":null,"dir":"Reference","previous_headings":"","what":"A Pollen Season Function — pollen_season","title":"A Pollen Season Function — pollen_season","text":"function calculates start end pollen season year","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Pollen Season Function — pollen_season","text":"","code":"pollen_season(value, date, method, threshold = NULL)"},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Pollen Season Function — pollen_season","text":"value pollen concentration values date dates method pollen season method - \"90\", \"95\", \"98\", \"Mesa\", \"Jager\", \"Lejoly\", \"Driessen\" threshold threshold value used \"Driessen\" method","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A Pollen Season Function — pollen_season","text":"data.frame object year, date pollen season start date pollen season end","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A Pollen Season Function — pollen_season","text":"Nilsson S. Persson S.: 1981, Tree pollen spectra Stockholm region (Sweden) 1973-1980, Grana 20, 179-182. Andersen T.B.: 1991, model predict beginning pollen season, Grana 30, 269-275. Torben B..: 1991, model predict beginning pollen season, Grana 30, 269-275. Galan C., Emberlin J., Dominguez E., Bryant R.H. Villamandos F.: 1995, comparative analysis daily variations Gramineae pollen counts Cordoba, Spain London, UK, Grana 34, 189-198. Sanchez-Mesa J.., Smith M., Emberlin J., Allitt U., Caulton E. Galan C.: 2003, Characteristics grass pollen seasons areas southern Spain United Kingdom, Aerobiologia 19, 243-250. Jager S., Nilsson S., Berggren B., Pessi .M., Helander M. Ramfjord H.: 1996, Trends airborne tree pollen Nordic countries Austria, 1980-1993. comparison Stockholm, Trondheim, Turku Vienna, Grana 35, 171-178. Lejoly-Gabriel Leuschner: 1983, Comparison air-borne pollen Louvain-la-Neuve (Belgium) Basel (Switzerland) 1979 1980, Grana 22, 59-64. Driessen M. N. B. M., Van Herpen R. M. . Smithuis, L. O. M. J.: 1990, Prediction start grass pollen season southern part Netherlands, Grana, 29(1), 79-86.","code":""},{"path":"https://jakubnowosad.com/pollen/reference/pollen_season.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Pollen Season Function — pollen_season","text":"","code":"data(pollen_count) df <- subset(pollen_count, site=='Oz') pollen_season(value=df$birch, date=df$date, method=\"95\") #>    year      start        end #> 1  2007 2007-03-31 2007-05-03 #> 2  2008 2008-04-19 2008-05-07 #> 3  2009 2009-04-09 2009-05-09 #> 4  2010 2010-04-14 2010-05-07 #> 5  2011 2011-04-20 2011-05-17 #> 6  2012 2012-04-09 2012-05-14 #> 7  2013 2013-04-09 2013-05-09 #> 8  2014 2014-04-08 2014-05-10 #> 9  2015 2015-04-08 2015-04-30 #> 10 2016 2016-04-06 2016-05-09  df2 <- subset(pollen_count, site=='Atlantis') pollen_season(value=df2$alder, date=df2$date, method=\"95\") #> Warning: NA values were found in the input data. #>    year      start        end #> 1  2007       <NA>       <NA> #> 2  2008 2008-03-23 2008-04-14 #> 3  2009 2009-03-16 2009-04-03 #> 4  2010 2010-03-26 2010-04-07 #> 5  2011 2011-03-28 2011-04-14 #> 6  2012 2012-02-13 2012-04-05 #> 7  2013 2013-02-05 2013-03-16 #> 8  2014 2014-02-11 2014-04-29 #> 9  2015 2015-03-19 2015-04-04 #> 10 2016 2016-03-14 2016-04-23  library('purrr') pollen_count %>% split(., .$site) %>%                  map_df(~pollen_season(value=.$hazel, date=.$date, method=\"95\"), .id=\"site\") #>                 site year      start        end #> 1           Atlantis 2007 2007-01-29 2007-03-19 #> 2           Atlantis 2008 2008-03-23 2008-04-14 #> 3           Atlantis 2009 2009-03-15 2009-04-11 #> 4           Atlantis 2010 2010-03-24 2010-04-14 #> 5           Atlantis 2011 2011-03-26 2011-04-12 #> 6           Atlantis 2012 2012-01-21 2012-03-26 #> 7           Atlantis 2013 2013-02-02 2013-03-29 #> 8           Atlantis 2014 2014-02-07 2014-04-09 #> 9           Atlantis 2015 2015-03-01 2015-03-30 #> 10          Atlantis 2016 2016-03-11 2016-04-06 #> 11 Hundred Acre Wood 2007 2007-01-29 2007-03-31 #> 12 Hundred Acre Wood 2008 2008-03-10 2008-05-10 #> 13 Hundred Acre Wood 2009 2009-02-08 2009-03-31 #> 14 Hundred Acre Wood 2010 2010-01-24 2010-04-16 #> 15 Hundred Acre Wood 2011 2011-03-25 2011-04-16 #> 16 Hundred Acre Wood 2012 2012-01-10 2012-03-29 #> 17 Hundred Acre Wood 2013 2013-01-24 2013-03-12 #> 18 Hundred Acre Wood 2014 2014-03-04 2014-03-31 #> 19 Hundred Acre Wood 2015 2015-02-26 2015-03-31 #> 20 Hundred Acre Wood 2016 2016-02-06 2016-03-31 #> 21                Oz 2007 2007-02-03 2007-03-18 #> 22                Oz 2008 2008-03-10 2008-04-03 #> 23                Oz 2009 2009-02-17 2009-03-26 #> 24                Oz 2010 2010-03-18 2010-04-10 #> 25                Oz 2011 2011-03-27 2011-04-13 #> 26                Oz 2012 2012-01-12 2012-03-14 #> 27                Oz 2013 2013-01-22 2013-03-25 #> 28                Oz 2014 2014-03-05 2014-04-05 #> 29                Oz 2015 2015-03-19 2015-04-02 #> 30                Oz 2016 2016-03-10 2016-03-30 #> 31             Shire 2007 2007-01-28 2007-03-24 #> 32             Shire 2008 2008-02-22 2008-04-01 #> 33             Shire 2009 2009-02-03 2009-03-27 #> 34             Shire 2010 2010-02-07 2010-04-07 #> 35             Shire 2011 2011-02-20 2011-04-12 #> 36             Shire 2012 2012-01-10 2012-03-18 #> 37             Shire 2013 2013-01-21 2013-03-02 #> 38             Shire 2014 2014-03-01 2014-03-27 #> 39             Shire 2015 2015-02-19 2015-03-30 #> 40             Shire 2016 2016-01-17 2016-03-28"}]
